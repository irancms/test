<?php


namespace App\Http\Controllers\admin;

use App\paye;
use App\clas;
use App\FirstMessage;
use App\Home;
use App\HomeImage;
use App\Http\Controllers\Controller;
use App\Job;
use App\KarnamehAdmin;
use App\MainPage;
use App\MainPagee;
use App\Models\Gateway;
use App\Models\Payment;
use App\Moshaver;
use App\OnlineClass;
use App\PreRegistration;
use App\Setting;
use App\User;
use App\Dars;
use Excel;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;
use Intervention\Image\Facades\Image;
use JoisarJignesh\Bigbluebutton\Facades\Bigbluebutton;
use Morilog\Jalali\Jalalian;
use PhpParser\Node\Expr\New_;
use App\Day;


class AdminController extends Controller
{

    /**
     * ImageController constructor.
     */
    public function __construct()
    {
        $this->middleware('auth');
    }


    public function index()
    {
        $payments = Payment::all();
        foreach ($payments as $payment) {
        }
        $user = User::where('id', auth()->user()->id)->pluck('role')->first();
        if ($user == 'دانش آموز' or $user == 'اولیا') {
            return back();
        }
        $modal = FirstMessage::where('receiver', '4')->where('modal', 1)->first();
        $messages = FirstMessage::where('receiver', '4')->where('modal', 0)->get();
        $day = Jalalian::now()->getDay();
        if ($day < 10) {
            $day = '0' . $day;
        }
        $mounth = Jalalian::now()->getMonth();
        if ($mounth < 10) {
            $mounth = '0' . $mounth;
        }
        $year = Jalalian::now()->getYear();
        $date = $year . '-' . $mounth . '-' . $day;
        $enddate = $year . '/' . $mounth . '/' . $day;
        $day = Jalalian::forge('today')->format('%A');
        $day = Day::where('name', $day)->first();
        $onlines = OnlineClass::where('date', '<=', $date)->where('enddate', '>=', $enddate)->where('status', 1)
            ->where('day_id', $day->id)

            ->orderby('start')
            ->with('author_class')
            ->get();
        $meetings = Moshaver::where('date', $enddate)
            ->where('user_id', auth()->user()->id)
            ->orderBy('start', 'asc')
            ->get();

        $setting = Setting::all()->first();
        $url = "https://hosting.ir.md/sms_api.php";
        $param = array(
            'key' => $setting->sms_token,
            'op' => 'info'
        );
        $handler = curl_init($url);
        curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($handler, CURLOPT_POSTFIELDS, $param);
        curl_setopt($handler, CURLOPT_RETURNTRANSFER, true);
        $sms_info = curl_exec($handler);
        $sms_token = $setting->sms_token;

        return view('Admin.index', compact('modal', 'messages', 'onlines', 'meetings', 'sms_info', 'sms_token'));
    }

    public function job(Request $request)
    {
        //        اعتبار سنجی اطلاعات ارسالی از فرم

        $this->validate(request(), [
            'job' => 'required',
        ]);

        //ایجاد ردیف جدید در جدول jobs
        $user_id = auth()->user()->id;
        $id = Job::create([
            'job' => request('job'),
            'user_id' => auth()->user()->id,
            'created_at' => Jalalian::now(),
            'updated_at' => Jalalian::now(),
        ]);

        return redirect('Admin/home');
    }

    public function changeStatus(Request $request)
    {
        $RTamas = RTamas::find($request->id);
        $RTamas->status = $request->status;
        $RTamas->save();

        return response()->json(['success' => 'Status change successfully.']);
    }

    public function mainpage()
    {

        $rows = DB::table('main_pages')->first();
        $rowss = DB::table('main_pagees')->whereNotIn('id', [1])->get();
        $rowsss = MainPagee::where('id', 1)->first();

        return view('Admin.mainpage', compact('rows', 'rowss', 'rowsss'));
    }

    public function mainpagestore(Request $request)
    {

        $row = MainPage::where('id', 1)->first();
        if (!empty($row)) {
            $row->update([
                'phone' => request('phone'),
                'email' => request('email'),
                'day' => request('day'),
                'time' => $request->time,
                'updated_at' => Jalalian::now(),
            ]);
        } else {
            MainPage::create([
                'phone' => request('phone'),
                'email' => request('email'),
                'day' => request('day'),
                'time' => $request->time,
                'created_at' => Jalalian::now(),
                'updated_at' => Jalalian::now(),
            ]);
        }
        $rows = DB::table('main_pages')->first();
        $rowss = DB::table('main_pagees')->whereNotIn('id', [1])->get();
        $rowsss = MainPagee::where('id', 1)->first();
        return view('Admin.mainpage', compact('rows', 'rowss', 'rowsss'));
    }

    public function mainpagestoree(Request $request)
    {
        //        اعتبار سنجی اطلاعات ارسالی از فرم
        $this->validate(request(), [
            'body' => 'max:300',
        ]);

        $row = MainPagee::where('id', 1)->first();

        if (!empty($request->name)) {
            MainPagee::create([
                'name' => request('name'),
                'site' => request('site'),
                'created_at' => Jalalian::now(),
                'updated_at' => Jalalian::now(),
            ]);
        }
        $rows = DB::table('main_pages')->first();
        $rowss = DB::table('main_pagees')->whereNotIn('id', [1])->get();
        $rowsss = MainPagee::where('id', 1)->first();
        return view('Admin.mainpage', compact('rows', 'rowss', 'rowsss'));
    }

    public function mainpagestoreefooter(Request $request)
    {
        //        اعتبار سنجی اطلاعات ارسالی از فرم
        $this->validate(request(), [
            'body' => 'max:300',
        ]);

        $row = MainPagee::where('id', 1)->first();
        $row->update([
            'body' => request('body'),
            'updated_at' => Jalalian::now(),
        ]);

        $rows = DB::table('main_pages')->first();
        $rowss = DB::table('main_pagees')->whereNotIn('id', [1])->get();
        $rowsss = MainPagee::where('id', 1)->first();
        return view('Admin.mainpage', compact('rows', 'rowss', 'rowsss'));
    }

    public function delete($id)
    {
        $job = Job::where('id', $id)->first();
        $job->delete();
    }

    /*
     * پیش ثبت نام ها
     */
    /**
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function pre_registration(Request $request)
    {

        $data = PreRegistration::when($request->get('f_name'), function ($query) use ($request) {
            $query->where('f_name', 'like', $request->f_name . '%');
        })
            ->when($request->get('l_name'), function ($query) use ($request) {
                $query->where('l_name', 'like',  $request->l_name . '%');
            })
            ->when($request->get('Fname'), function ($query) use ($request) {
                $query->where('Fname', 'like',  $request->Fname . '%');
            })
            ->when($request->get('codemeli'), function ($query) use ($request) {
                $query->where('codemeli', 'like', $request->codemeli . '%');
            })
            ->when($request->get('paye'), function ($query) use ($request) {
                $query->where('paye', 'like', $request->paye);
            })
            ->orderByDesc('created_at')
            ->paginate(25);
        $allpaye = paye::all();
        return view('Admin.pre_registration', compact('data', 'allpaye'));
    }

    /*
     * گرفتن خروجی اکسل
     */
    /**
     * @return mixed
     */
    public function registrationExcel()
    {
        $data = PreRegistration::select('*')
            ->get()->toArray();

        return Excel::create('لیست پیش ثبت نام ها', function ($excel) use ($data) {
            $excel->sheet('users', function ($sheet) use ($data) {
                $sheet->fromArray($data);
            });
        })->download('xlsx');
    }

    public function converse()
    {
        $data = Home::where('place', 'سخن مدیر')->first();
        return view('Admin.home.converse', compact('data'));
    }

    public function conversestore(Request $request)
    {
        $this->validate(request(), [
            'title' => 'required',
            'place' => 'required',
            'body' => 'required',
        ]);

        $data = Home::where('place', 'سخن مدیر')->first();
        if ($data) {
            $data->update([
                'body' => request('body')
            ]);
        } else {
            //        ایجاد ردیف در جدول home
            $data = Home::create([
                'title' => request('title'),
                'body' => request('body'),
                'place' => request('place'),
                'user_id' => auth()->user()->id,
                'created_at' => Jalalian::now(),
                'updated_at' => Jalalian::now(),
            ]);
        }


        //        ایجاد فایل مناسب برای عکس ها
        $patchfile = $request->file('patchfile');
        if (!empty($request->patchfile)) {
            $delimages = HomeImage::where('matlab_id', $data->id)->get();
            foreach ($delimages as $delimage) {
                $delimage->delete();
            }


            $cover = $patchfile;
            $filename = time() . '.' . '.png';
            $path = public_path('/images/' . $filename);
            Image::make($cover->getRealPath())->resize(1275, 804)->save($path);
            $extension = $cover->getClientOriginalExtension();
            $mime = $cover->getClientMimeType();
            $original_filename = $cover->getClientOriginalName();


            //  ایجاد یک ردیف برای ذخیره عکس در جدول imagehome
            HomeImage::create([
                'matlab_id' => $data->id,
                'mime' => $mime,
                'original_filename' => $original_filename,
                'filename' => $filename,
                'resize_image' => $filename,
            ]);
        }

        return redirect('admin/converse')->with('status', 'مطلب شما با موفقیت ایجاد شد');
    }

    public function mainpagedelete($id)
    {
        $site = MainPagee::find($id);
        $site->delete();
        return back();
    }

    public function karnamehcreate()
    {
        $class = clas::all();
        return view('Admin.karnameh.create', compact('class'));
    }

    public function karnamehstore(Request $request)
    {
        $this->validate(request(), [
            'start' => 'required',
            'class' => 'required',
            'name' => 'required',
        ]);
        $users = User::whereIn('class', $request->class)->where('role', 'دانش آموز')->select('id')->with('markitems')->get();
        $start = str_replace('/', '-', $request->start);
        $end = str_replace('/', '-', $request->end);
        $Karnamehsadmin = KarnamehAdmin::where('name', $request->name)->get();
        foreach ($Karnamehsadmin as $Karnamehadmin) {
            $Karnamehadmin->delete();
        }
        foreach ($users as $user) {
            foreach ($user->markitems->whereBetween('created_at', [$start, $end]) as $mark) {
                $karnameh = KarnamehAdmin::where('user_id', $user->id)->where('name', $request->name)->where('dars_id', $mark->items->dars)->first();
                if (!$karnameh) {
                    KarnamehAdmin::create([
                        'user_id' => $user->id,
                        'dars_id' => $mark->items->dars,
                        'name' => $request->name,
                        'count' => 1,
                        'mark' => $mark->mark
                    ]);
                } else {
                    $count = $karnameh->count + 1;
                    $karnameh->update([
                        'count' => $count,
                        'mark' => (($karnameh->mark * $karnameh->count) + $mark->mark)  / $count
                    ]);
                }
            }
        }
        alert()->success('کارنامه با موفقیت تولید شد.', 'عملیات موفق');
        return back();
    }

    public function karnamehshow($name, $class)
    {
        $students = User::where('class', $class)->where('role', 'دانش آموز')->with(['karnameadmin' => function ($query) use ($name) {
            $query->where('name', $name);
        }])->get();
        return view('Admin.karnameh.newstudent', compact('students', 'class', 'name'));
    }

    public function karnamehshowprintlist($name, $class)
    {
        $setting = Setting::all()->first();
        $students = User::where('class', $class)->where('role', 'دانش آموز')->with(['karnameadmin' => function ($query) use ($name) {
            $query->where('name', $name);
        }])->get();
        $render1 = '<!DOCTYPE html>
                <html>
                        <head>
                        <style>
                        @font-face {
                            font-family: "yekan";
                            src: url(/admin/fonts/Yekan.eot);
                            src: url(/admin/fonts/Yekand41d.eot?#iefix) format("embedded-opentype"), url(/admin/fonts/Yekan.woff) format("woff"), url(/admin/fonts/Yekan.ttf) format("truetype"), url(/admin/fonts/Yekan.svg#BYekan) format("svg");
                            font-weight: normal;
                            font-style: normal
                        }
                        body {font-family:yekan;
                            font-size: 10pt;
                        }
                        div.blueTable {
                  border: 1px solid #1C6EA4;
                  background-color: #EEEEEE;
                  width: 100%;
                  text-align: right;
                  border-collapse: collapse;
                }
                .divTable.blueTable .divTableCell, .divTable.blueTable .divTableHead {
                  border: 1px solid #AAAAAA;
                  padding: 3px 2px;
                }
                .divTable.blueTable .divTableBody .divTableCell {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle .links {
                     text-align: right;
                }
                .blueTable .tableFootStyle .links a{
                  display: inline-block;
                  background: #1C6EA4;
                  color: #FFFFFF;
                  padding: 2px 8px;
                  border-radius: 5px;
                }
                .blueTable.outerTableFooter {
                  border-top: none;
                }
                .blueTable.outerTableFooter .tableFootStyle {
                  padding: 3px 5px; 
                }
                /* DivTable.com */
                .divTable{ display: table; }
                .divTableRow { display: table-row; }
                .divTableHeading { display: table-header-group;}
                .divTableCell, .divTableHead { display: table-cell;}
                .divTableHeading { display: table-header-group;}
                .divTableFoot { display: table-footer-group;}
                .divTableBody { display: table-row-group;}
                p {	margin: 0pt;
                    font-size: 13px; }
                        table.items {
                            border: 0.1mm solid #000000;
                        }
                        td { vertical-align: top; }
                        .items td {
                            border-left: 0.1mm solid #000000;
                            border-right: 0.1mm solid #000000;
                            border-top: 0.1mm solid #000000;
                        }
                        table thead td { background-color: #EEEEEE;
                            border: 0.1mm solid #000000;
                            font-variant: small-caps;
                        }
                        :root {
                            --bleeding: 0.2cm;
                            --margin: 0.5cm;
                          }
                          
                          @page {
                            size: A4;
                            margin: 0;
                          }
                          * {
                            box-sizing: border-box;
                          }
                          
                          body {
                            margin: 0 auto;
                            padding: 0;
                            background: rgb(204, 204, 204);
                            display: flex;
                            flex-direction: column;
                          }
                          
                          .page {
                            display: inline-block;
                            position: relative;
                            height: 297mm;
                            width: 210mm;
                            font-size: 10pt;
                            margin: 2em auto;
                            padding: calc(var(--bleeding) + var(--margin));
                            box-shadow: 0 0 0.0cm rgba(0, 0, 0, 0.5);
                            background: white;
                          }
                          
                          @media screen {
                            .page::after {
                              position: absolute;
                              content: "";
                              top: 0;
                              left: 0;
                              width: calc(100% - var(--bleeding) * 2);
                              height: calc(100% - var(--bleeding) * 2);
                              margin: var(--bleeding);
                              outline: thin dashed black;
                              pointer-events: none;
                              z-index: 9999;
                            }
                            div.footer {
                                display: none;
                            }
                          }
                          
                          @media print {
                            .page {
                              margin: 0;
                              overflow: hidden;
                            }
                            div.footer {
                                position: fixed;
                                bottom: 1cm;
                                width: 210mm;
                            }
                          }
                        </style>
                        </head>
                        <body dir="rtl">
                        <div class="page">
                        <htmlpageheader name="myheader">
                        <table width="100%"><tr>
                        <td width="50%" style="color:#000000; "><span style="font-weight: bold; font-size: 14pt;">لیست کارنامه ' . $name . ' -  کلاس ' . $class . '</span><br /><span>تاریخ: ' . Jalalian::forge('today')->format('Y/m/d') . '</span></td>
                        <td width="50%" style="text-align: left;"><img src="/uploads/' . $setting->logo . '"></td>
                        </tr></table>
                        </htmlpageheader>
                        <sethtmlpageheader name="myheader" value="on" show-this-page="1" />
                        <table class="items" width="100%" style="font-size: 9pt; border-collapse: collapse; " cellpadding="8">
                            <tbody>
                            <tr>
                            <td style="background-color: #EEEEEE;text-align:center">#</td>
                            <td style="background-color: #EEEEEE;text-align:center">نام</td>
                            <td style="background-color: #EEEEEE;text-align:center">نام خانوادگی</td>
                            <td style="background-color: #EEEEEE;text-align:center">معدل</td>
                            </tr>
                            </tbody>';
        echo $render1;
        $idn = 1;
        foreach ($students as $mykarnameh) {
            $vaheds = 0;
            $marks = 0;
            if ($mykarnameh->karnameadmin != '[]') {
                foreach ($mykarnameh->karnameadmin as $karnameh) {
                    $vahed = $karnameh->dars->vahed;
                    $mark = $vahed * $karnameh->mark;
                    $vaheds = $vaheds + $vahed;
                    $marks = $marks + $mark;
                    if ($vaheds == 0) {
                        $moadel = 0;
                    } else {
                        $moadel = round($marks / $vaheds, 2);
                    }
                }
            } else {
                $moadel = 'نمره ای وجود ندارد';
            }
            echo '<tr>
                            <td style="background-color: #fff;text-align:center">' . $idn . '</td>
                            <td style="background-color: #fff;text-align:right">' . $mykarnameh->f_name . '</td>
                            <td style="background-color: #fff;text-align:right">' . $mykarnameh->l_name . '</td>
                            <td style="background-color: #fff;text-align:center">' . round($moadel, 2) . '</td>
                            </tr>';
            $idn = $idn + 1;
        }
        $render2 = '</table>';
        echo $render2;
        $render3 = '
                        <div class="footer" style="border-top: 1px solid #000000; font-size: 9pt; text-align: center; padding-top: 3mm; ">
                        سامانه مدیریت آموزش مدارس (سَمام)
                        </div>
                        </div>
                        </body>
                        </html>';
        echo $render3;
    }

    public function skarnamehshow($name, $user, $moadel)
    {
        $mykarnamehs = KarnamehAdmin::where('name', $name)->where('user_id', $user)->get();
        return view('Admin.karnameh.newskarnameh', compact('mykarnamehs', 'moadel'));
    }

    public function skarnamehprint($name, $user, $moadel)
    {
        $setting = Setting::all()->first();
        $mykarnamehs = KarnamehAdmin::where('name', $name)->where('user_id', $user)->get();
        $user = User::where('id', $user)->where('role', 'دانش آموز')->first();
        $render1 = '<!DOCTYPE html>
                <html>
                        <head>
                        <style>
                        @font-face {
                            font-family: "yekan";
                            src: url(/admin/fonts/Yekan.eot);
                            src: url(/admin/fonts/Yekand41d.eot?#iefix) format("embedded-opentype"), url(/admin/fonts/Yekan.woff) format("woff"), url(/admin/fonts/Yekan.ttf) format("truetype"), url(/admin/fonts/Yekan.svg#BYekan) format("svg");
                            font-weight: normal;
                            font-style: normal
                        }
                        body {font-family:yekan;
                            font-size: 10pt;
                        }
                        div.blueTable {
                  border: 1px solid #1C6EA4;
                  background-color: #EEEEEE;
                  width: 100%;
                  text-align: right;
                  border-collapse: collapse;
                }
                .divTable.blueTable .divTableCell, .divTable.blueTable .divTableHead {
                  border: 1px solid #AAAAAA;
                  padding: 3px 2px;
                }
                .divTable.blueTable .divTableBody .divTableCell {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle .links {
                     text-align: right;
                }
                .blueTable .tableFootStyle .links a{
                  display: inline-block;
                  background: #1C6EA4;
                  color: #FFFFFF;
                  padding: 2px 8px;
                  border-radius: 5px;
                }
                .blueTable.outerTableFooter {
                  border-top: none;
                }
                .blueTable.outerTableFooter .tableFootStyle {
                  padding: 3px 5px; 
                }
                /* DivTable.com */
                .divTable{ display: table; }
                .divTableRow { display: table-row; }
                .divTableHeading { display: table-header-group;}
                .divTableCell, .divTableHead { display: table-cell;}
                .divTableHeading { display: table-header-group;}
                .divTableFoot { display: table-footer-group;}
                .divTableBody { display: table-row-group;}
                p {	margin: 0pt;
                    font-size: 13px; }
                        table.items {
                            border: 0.1mm solid #000000;
                        }
                        td { vertical-align: top; }
                        .items td {
                            border-left: 0.1mm solid #000000;
                            border-right: 0.1mm solid #000000;
                            border-top: 0.1mm solid #000000;
                        }
                        table thead td { background-color: #EEEEEE;
                            border: 0.1mm solid #000000;
                            font-variant: small-caps;
                        }
                        :root {
                            --bleeding: 0.2cm;
                            --margin: 0.5cm;
                          }
                          
                          @page {
                            size: A4;
                            margin: 0;
                          }
                          * {
                            box-sizing: border-box;
                          }
                          
                          body {
                            margin: 0 auto;
                            padding: 0;
                            background: rgb(204, 204, 204);
                            display: flex;
                            flex-direction: column;
                          }
                          
                          .page {
                            display: inline-block;
                            position: relative;
                            height: 297mm;
                            width: 210mm;
                            font-size: 10pt;
                            margin: 2em auto;
                            padding: calc(var(--bleeding) + var(--margin));
                            box-shadow: 0 0 0.0cm rgba(0, 0, 0, 0.5);
                            background: white;
                          }
                          
                          @media screen {
                            .page::after {
                              position: absolute;
                              content: "";
                              top: 0;
                              left: 0;
                              width: calc(100% - var(--bleeding) * 2);
                              height: calc(100% - var(--bleeding) * 2);
                              margin: var(--bleeding);
                              outline: thin dashed black;
                              pointer-events: none;
                              z-index: 9999;
                            }
                            div.footer {
                                display: none;
                            }
                          }
                          
                          @media print {
                            .page {
                              margin: 0;
                              overflow: hidden;
                            }
                            div.footer {
                                position: fixed;
                                bottom: 1cm;
                                width: 210mm;
                            }
                          }
                        </style>
                        </head>
                        <body dir="rtl">
                        <div class="page">
                        <htmlpageheader name="myheader">
                        <table width="100%">
                        <tr>
                        <td width="10%" style="text-align: left;"><img style="width: 200px; padding-top:20px" src="/uploads/' . $setting->logo . '"></td>
                        <td width="45%" style="padding-right:10px;padding-top:10px;border: 1px solid black;border-collapse: collapse;color:#000000; ">
                        <span style="font-weight: bold; font-size: 10pt;">' . $setting->name . ' </span><br /><br /><br />
                        <center><span>پایه: ' . $user->paye . ' &nbsp;&nbsp;&nbsp;&nbsp; - &nbsp;&nbsp;&nbsp;&nbsp; کلاس: ' . $user->class . '</span></center>
                        </td>
                        <td width="1%"><span>&nbsp;</span></td>
                        <td width="44%" style="padding-right:10px;padding-top:10px;border: 1px solid black;border-collapse: collapse;color:#000000; ">
                        <span>نام: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->f_name . ' </span><br />
                        <span>نام خانوادگی: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->l_name . ' </span><br />
                        <span>نام پدر: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->fname . ' </span><br />
                        <span>کد ملی: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->codemeli . ' </span><br />
                        </td>
                        </tr>
                        </table>
                        <center><b style="font-size: 12pt;">کارنامه ' . $name . '</b></center><br>
                        </htmlpageheader>
                        <sethtmlpageheader name="myheader" value="on" show-this-page="1" />
                        <table class="items" width="100%" style="font-size: 9pt; border-collapse: collapse; " cellpadding="8">
                            <tbody>
                            <tr>
                            <td style="background-color: #EEEEEE;text-align:center">#</td>
                            <td style="background-color: #EEEEEE;text-align:center">نام درس</td>
                            <td style="background-color: #EEEEEE;text-align:center">نمره شما</td>
                            <td style="background-color: #EEEEEE;text-align:center">بالاترین نمره کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center">میانگین نمره کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center">رتبه در کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center" >رتبه در پایه</td>
                            </tr>
                            </tbody>';
        echo $render1;
        $idn = 1;
        $moadel = 0;
        $topmoadel = 0;
        $avgmoadel = 0;
        foreach ($mykarnamehs as $mykarnameh) {
            echo '<tr>
                            <td style="background-color: #fff;text-align:center">' . $idn . '</td>
                            <td style="background-color: #fff;text-align:right">' . \App\dars::where('id', $mykarnameh->dars_id)->first()['name'] . '</td>
                            <td style="background-color: #fff;text-align:center">' . round($mykarnameh->mark, 2) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->gettop_ka($mykarnameh->name, $mykarnameh->dars_id) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->getavg_ka($mykarnameh->name, $mykarnameh->dars_id) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->getclassrank_ka($mykarnameh->name, $mykarnameh->dars_id, $user->id, $mykarnameh->mark) . '</td>
                            <td style="background-color: #fff;text-align:center" >' . $this->getpayerank_ka($mykarnameh->name, $mykarnameh->dars_id, $user->id, $mykarnameh->mark) . '</td>
                            </tr>';
            $idn = $idn + 1;
            $moadel = $moadel + $mykarnameh->mark;
            $topmoadel = $topmoadel + $this->gettop_ka($mykarnameh->name, $mykarnameh->dars_id);
            $avgmoadel = $avgmoadel +  $this->getavg_ka($mykarnameh->name, $mykarnameh->dars_id);
        }
        $moadel = $moadel / ($idn - 1);
        $topmoadel = $topmoadel / ($idn - 1);
        $avgmoadel = $avgmoadel / ($idn - 1);
        $render2 = '<tr>
                <td colspan="2" style="background-color: #EEEEEE;text-align:left"> معدل:</td>
                <td colspan="1" style="background-color: #fff;text-align:center">' . round($moadel, 2) . '</td>
                <td style="background-color: #fff;text-align:center">' . round($topmoadel, 2) . '</td>
                <td style="background-color: #fff;text-align:center" >' . round($avgmoadel, 2) . '</td>
                <td colspan="2" style="background-color: #fff;text-align:center;" ></td>
                </tr></table><br>
                توجه: کارنامه فوق میانگین نمرات کسب شده توسط شما  در بازه زمانی مشخص شده توسط مدیر می باشد و همچنین محاسبه معدل بدون در نظر گرفتن ضرایب درس ها صورت گرفته است.<br><br>';
        echo $render2;
        $render3 = '
                        <div class="footer" style="border-top: 1px solid #000000; font-size: 9pt; text-align: center; padding-top: 3mm; ">
                        سامانه مدیریت آموزش مدارس (سَمام)
                        </div>
                        </div>
                        </body>
                        </html>';
        echo $render3;
    }

    function getclassrank_ka($idk, $mykarnameh, $id, $mymark)
    {
        $class = \App\User::where('id', $id)->first()['class'];
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(karnameh_admins.mark) AS avg
      FROM karnameh_admins
      WHERE karnameh_admins.name = '$idk'
      AND karnameh_admins.dars_id = $mykarnameh
      GROUP BY karnameh_admins.dars_id,
      karnameh_admins.user_id
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh) {
            if ($mykarnameh->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        return $rotbeh;
    }

    function getclassdeveloop_ka($idk, $mykarnameh, $id, $mymark)
    {
        $class = \App\User::where('id', $id)->first()['class'];
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(karnameh_admins.mark) AS avg
      FROM karnameh_admins
      AND MONTH(karnameh_admins.id) = '$idk'
      AND karnameh_admins.dars_id = $mykarnameh
      GROUP BY karnameh_admins.dars_id,
      karnameh_admins.user_id
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh1) {
            if ($mykarnameh1->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        $value = $rotbeh;

        return $value;
    }

    function getpayerank_ka($idk, $mykarnameh, $id, $mymark)
    {
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(karnameh_admins.mark) AS avg
      FROM karnameh_admins
      WHERE karnameh_admins.name = '$idk'
      AND karnameh_admins.dars_id = $mykarnameh
      GROUP BY karnameh_admins.dars_id,
      karnameh_admins.user_id
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh) {
            if ($mykarnameh->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        return $rotbeh;
    }

    function getpayedeveloop_ka($idk, $mykarnameh, $id, $mymark)
    {
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(karnameh_admins.mark) AS avg
      FROM karnameh_admins
      WHERE karnameh_admins.id = $idk
      AND karnameh_admins.dars_id = $mykarnameh
      GROUP BY karnameh_admins.dars_id,
      karnameh_admins.user_id
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh1) {
            if ($mykarnameh1->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        $value = $rotbeh;

        return $value;
    }

    function gettop_ka($idk, $dars)
    {
        $marks = \Illuminate\Support\Facades\DB::table('karnameh_admins')->where('name', $idk)->where('dars_id', $dars)
            ->select(\Illuminate\Support\Facades\DB::raw('avg(mark) as avg,  user_id'))
            ->groupBy('user_id')
            ->orderBy('avg', 'desc')
            ->get();
        //dd($marks);
        $top = round($marks[0]->avg, 2);
        return $top;
    }

    function getavg_ka($idk, $dars)
    {
        $marks = \Illuminate\Support\Facades\DB::table('karnameh_admins')->where('name', $idk)->where('dars_id', $dars)
            ->select(\Illuminate\Support\Facades\DB::raw('avg(mark) as avg,  user_id'))
            ->groupBy('user_id')
            ->get();

        $avg = $marks->avg('avg');
        $avge = round($avg, 2);
        return $avge;
    }

    /*
     * کارنامه های تولید شده توسط سامانه
     */
    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function karnamemonth()
    {
        $class = clas::all();
        return view('Admin.karnameh.month', compact('class'));
    }


    /*
     رندر کردن کارنامه ماهانه با انتخاب ماه*
     */
    /**
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function karnamemonthrender(Request $request)
    {
        $month = $request->month;
        if ($month == 1) {
            $pmonth = 12;
        } else {
            $pmonth = $month - 1;
        }
        $class = $request->class;
        $users = User::where('role', 'دانش آموز')->where('class',  $class)->get();
        $setting = Setting::all()->first();
        foreach ($users as $user) {
            $id = $user->id;
            $idc = $class;

            $mykarnamehs = DB::table('mark_items')->whereRaw('MONTH(created_at) = ?', $month)->where('codclass', $class)
                ->where('user_id', $id)
                ->select(DB::raw('avg(mark) as avg,  coddars'))
                ->groupBy('coddars')
                ->get();

            if ($month == 7) {
                $KarnamehName = 'مهر';
            } elseif ($month == 8) {
                $KarnamehName = 'آبان';
            } elseif ($month == 9) {
                $KarnamehName = 'آذر';
            } elseif ($month == 10) {
                $KarnamehName = 'دی';
            } elseif ($month == 11) {
                $KarnamehName = 'بهمن';
            } elseif ($month == 12) {
                $KarnamehName = 'اسفند';
            } elseif ($month == 1) {
                $KarnamehName = 'فروردین';
            } elseif ($month == 2) {
                $KarnamehName = 'اردیبهشت';
            } elseif ($month == 3) {
                $KarnamehName = 'خرداد';
            } elseif ($month == 6) {
                $KarnamehName = 'شهریور';
            }

            if ($pmonth == 7) {
                $pKarnamehName = 'مهر';
            } elseif ($pmonth == 8) {
                $pKarnamehName = 'آبان';
            } elseif ($pmonth == 9) {
                $pKarnamehName = 'آذر';
            } elseif ($pmonth == 10) {
                $pKarnamehName = 'دی';
            } elseif ($pmonth == 11) {
                $pKarnamehName = 'بهمن';
            } elseif ($pmonth == 12) {
                $pKarnamehName = 'اسفند';
            } elseif ($pmonth == 1) {
                $pKarnamehName = 'فروردین';
            } elseif ($pmonth == 2) {
                $pKarnamehName = 'اردیبهشت';
            } elseif ($pmonth == 3) {
                $pKarnamehName = 'خرداد';
            } elseif ($pmonth == 6) {
                $pKarnamehName = 'شهریور';
            }

            $classnumber = $class;
            $studentnumbers = \App\student::where('classid', $classnumber)->count();
            $collection = DB::select(DB::raw("SELECT
        *,
        AVG(mark_items.mark) AS avg
      FROM mark_items
      WHERE mark_items.codclass = $class
      AND MONTH(mark_items.created_at) = '$month'
      GROUP BY mark_items.coddars,
               mark_items.user_id,
               mark_items.codclass
      ORDER BY avg DESC"));
            $rotbehh = 0;
            $rotbeh = 1;
            foreach ($collection as $mykarnameh) {
                if ($mykarnameh->user_id == $id) {
                    $rotbeh = $rotbehh;
                } else {
                    $rotbehh = $rotbehh + 1;
                }
            }
            $rankkol = $rotbeh;
            if ($rankkol == 0) {
                $rankkol = 1;
            }

            //         $collectionpaye = DB::select(DB::raw("SELECT
            //     *,
            //     AVG(mark_items.mark) AS avg
            //   FROM mark_items
            //   WHERE  MONTH(mark_items.created_at) = '$month'
            //   GROUP BY mark_items.coddars,
            //            mark_items.user_id
            //   ORDER BY avg DESC"));
            //         $rotbehhpaye = 0;
            //         $rotbehpaye = 1;

            //         foreach ($collectionpaye as $mykarnamehpaye) {
            //             if ($mykarnamehpaye->user_id == $id) {
            //                 $rotbehpaye = $rotbehhpaye;
            //             } else {
            //                 $rotbehhpaye = $rotbehhpaye + 1;
            //             }
            //         }
            //         $rankkolpaye = $rotbehpaye;
            //         if ($rankkolpaye == 0) {
            //             $rankkolpaye = 1;
            //         }

            $idk = $month;
            if (\App\Setting::all()->first()->type_mark == 1) {
                // return view('includ.karnamehrendersmonth', compact('mykarnamehs', 'moadel', 'KarnamehName', 'studentnumbers', 'rankkol', 'month', 'idk', 'id', 'idc'));
                $render1 = '<!DOCTYPE html>
                <html>
                        <head>
                        <style>
                        @font-face {
                            font-family: "yekan";
                            src: url(/admin/fonts/Yekan.eot);
                            src: url(/admin/fonts/Yekand41d.eot?#iefix) format("embedded-opentype"), url(/admin/fonts/Yekan.woff) format("woff"), url(/admin/fonts/Yekan.ttf) format("truetype"), url(/admin/fonts/Yekan.svg#BYekan) format("svg");
                            font-weight: normal;
                            font-style: normal
                        }
                        body {font-family:yekan;
                            font-size: 10pt;
                        }
                        div.blueTable {
                  border: 1px solid #1C6EA4;
                  background-color: #EEEEEE;
                  width: 100%;
                  text-align: right;
                  border-collapse: collapse;
                }
                .divTable.blueTable .divTableCell, .divTable.blueTable .divTableHead {
                  border: 1px solid #AAAAAA;
                  padding: 3px 2px;
                }
                .divTable.blueTable .divTableBody .divTableCell {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle .links {
                     text-align: right;
                }
                .blueTable .tableFootStyle .links a{
                  display: inline-block;
                  background: #1C6EA4;
                  color: #FFFFFF;
                  padding: 2px 8px;
                  border-radius: 5px;
                }
                .blueTable.outerTableFooter {
                  border-top: none;
                }
                .blueTable.outerTableFooter .tableFootStyle {
                  padding: 3px 5px; 
                }
                /* DivTable.com */
                .divTable{ display: table; }
                .divTableRow { display: table-row; }
                .divTableHeading { display: table-header-group;}
                .divTableCell, .divTableHead { display: table-cell;}
                .divTableHeading { display: table-header-group;}
                .divTableFoot { display: table-footer-group;}
                .divTableBody { display: table-row-group;}
                p {	margin: 0pt;
                    font-size: 13px; }
                        table.items {
                            border: 0.1mm solid #000000;
                        }
                        td { vertical-align: top; }
                        .items td {
                            border-left: 0.1mm solid #000000;
                            border-right: 0.1mm solid #000000;
                            border-top: 0.1mm solid #000000;
                        }
                        table thead td { background-color: #EEEEEE;
                            border: 0.1mm solid #000000;
                            font-variant: small-caps;
                        }
                        :root {
                            --bleeding: 0.2cm;
                            --margin: 0.5cm;
                          }
                          
                          @page {
                            size: A4;
                            margin: 0;
                          }
                          * {
                            box-sizing: border-box;
                          }
                          
                          body {
                            margin: 0 auto;
                            padding: 0;
                            background: rgb(204, 204, 204);
                            display: flex;
                            flex-direction: column;
                          }
                          
                          .page {
                            display: inline-block;
                            position: relative;
                            height: 297mm;
                            width: 210mm;
                            font-size: 10pt;
                            margin: 2em auto;
                            padding: calc(var(--bleeding) + var(--margin));
                            box-shadow: 0 0 0.0cm rgba(0, 0, 0, 0.5);
                            background: white;
                          }
                          
                          @media screen {
                            .page::after {
                              position: absolute;
                              content: "";
                              top: 0;
                              left: 0;
                              width: calc(100% - var(--bleeding) * 2);
                              height: calc(100% - var(--bleeding) * 2);
                              margin: var(--bleeding);
                              outline: thin dashed black;
                              pointer-events: none;
                              z-index: 9999;
                            }
                            div.footer {
                                display: none;
                            }
                          }
                          
                          @media print {
                            .page {
                              margin: 0;
                              overflow: hidden;
                            }
                            div.footer {
                                position: fixed;
                                bottom: 1cm;
                                width: 210mm;
                            }
                          }
                        </style>
                        </head>
                        <body dir="rtl">
                        <div class="page">
                        <htmlpageheader name="myheader">
                        <table width="100%">
                        <tr>
                        <td width="10%" style="text-align: left;"><img style="width: 200px; padding-top:20px" src="/uploads/' . $setting->logo . '"></td>
                        <td width="45%" style="padding-right:10px;padding-top:10px;border: 1px solid black;border-collapse: collapse;color:#000000; ">
                        <span style="font-weight: bold; font-size: 10pt;">' . $setting->name . ' </span><br /><br /><br />
                        <center><span>پایه: ' . $user->paye . ' &nbsp;&nbsp;&nbsp;&nbsp; - &nbsp;&nbsp;&nbsp;&nbsp; کلاس: ' . $user->class . '</span></center>
                        </td>
                        <td width="1%"><span>&nbsp;</span></td>
                        <td width="44%" style="padding-right:10px;padding-top:10px;border: 1px solid black;border-collapse: collapse;color:#000000; ">
                        <span>نام: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->f_name . ' </span><br />
                        <span>نام خانوادگی: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->l_name . ' </span><br />
                        <span>نام پدر: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->fname . ' </span><br />
                        <span>کد ملی: </span><span style="font-weight: bold; font-size: 10pt;"> ' . $user->codemeli . ' </span><br />
                        </td>
                        </tr>
                        </table>
                        <center><b style="font-size: 12pt;">کارنامه ' . $KarnamehName . ' ماه</b></center><br>
                        </htmlpageheader>
                        <sethtmlpageheader name="myheader" value="on" show-this-page="1" />
                        <table class="items" width="100%" style="font-size: 9pt; border-collapse: collapse; " cellpadding="8">
                            <tbody>
                            <tr>
                            <td style="background-color: #EEEEEE;text-align:center">#</td>
                            <td style="background-color: #EEEEEE;text-align:center">نام درس</td>
                            <td style="background-color: #EEEEEE;text-align:center">واحد</td>
                            <td style="background-color: #EEEEEE;text-align:center">نمره شما</td>
                            <td style="background-color: #EEEEEE;text-align:center">بالاترین نمره کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center">میانگین نمره کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center">رتبه در کلاس</td>
                            <td style="background-color: #EEEEEE;text-align:center" >رتبه در پایه</td>
                            </tr>
                            </tbody>';
                echo $render1;
                $idn = 1;
                $moadel = 0;
                $topmoadel = 0;
                $avgmoadel = 0;
                $marks = 0;
                $vaheds = 0;
                foreach ($mykarnamehs as $mykarnameh) {
                    echo '<tr>
                            <td style="background-color: #fff;text-align:center">' . $idn . '</td>
                            <td style="background-color: #fff;text-align:right">' . \App\dars::where('id', $mykarnameh->coddars)->first()['name'] . '</td>
                            <td style="background-color: #fff;text-align:center">' . \App\dars::where('id', $mykarnameh->coddars)->first()['vahed'] . '</td>
                            <td style="background-color: #fff;text-align:center">' . round($mykarnameh->avg, 2) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->gettop($idk, $mykarnameh->coddars) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->getavg($idk, $mykarnameh->coddars) . '</td>
                            <td style="background-color: #fff;text-align:center">' . $this->getclassrank($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) . '</td>
                            <td style="background-color: #fff;text-align:center" >' . $this->getpayerank($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) . '</td>
                            </tr>';
                    $idn = $idn + 1;

                    $vahed = \App\dars::where('id', $mykarnameh->coddars)->first()['vahed'];
                    $mark = ($mykarnameh->avg) * $vahed;
                    $vaheds = $vaheds + $vahed;
                    $marks = $marks + $mark;

                    // $moadel = $moadel + $mykarnameh->avg;
                    $topmark = ($this->gettop($idk, $mykarnameh->coddars)) * $vahed;
                    $topmoadel = $topmoadel + $topmark;
                    $avgmark = ($this->getavg($idk, $mykarnameh->coddars)) * $vahed;
                    $avgmoadel = $avgmoadel +  $avgmark;
                }
                if (
                    $vaheds == 0
                ) {
                    $moadel = 0;
                    $topmoadel = 0;
                    $avgmoadel = 0;
                } else {
                    $moadel = round($marks / $vaheds, 2);
                    $topmoadel = round($topmoadel / $vaheds, 2);
                    $avgmoadel = round($avgmoadel / $vaheds, 2);
                }
                // $moadel = $moadel / ($idn - 1);
                // $topmoadel = $topmoadel / ($idn - 1);
                // $avgmoadel = $avgmoadel / ($idn - 1);
                $render2 = '<tr>
                <td colspan="2" style="background-color: #EEEEEE;text-align:left"> معدل:</td>
                <td colspan="2" style="background-color: #fff;text-align:center">' . round($moadel, 2) . '</td>
                <td style="background-color: #fff;text-align:center">' . $topmoadel . '</td>
                <td style="background-color: #fff;text-align:center" >' . $avgmoadel . '</td>
                <td colspan="1" style="background-color: #EEEEEE;text-align:center;" >رتبه کلی در کلاس:</td>
                <td colspan="1" style="background-color: #fff;text-align:center;" >' . $rankkol . '</td>
                </tr></table><br>
                توجه: کارنامه فوق میانگین نمرات کسب شده توسط شما در ' . $KarnamehName . ' ماه می باشد.<br><br>';
                echo $render2;
                $idn = $idn + 1;

                $render3 = '
                        <div class="footer" style="border-top: 1px solid #000000; font-size: 9pt; text-align: center; padding-top: 3mm; ">
                        سامانه مدیریت آموزش مدارس (سَمام)
                        </div>
                        </div>
                        </body>
                        </html>';
                echo $render3;

                $render1 = '<!DOCTYPE html>
                <html>
                        <head>
                        <style>
                        @font-face {
                            font-family: "yekan";
                            src: url(/admin/fonts/Yekan.eot);
                            src: url(/admin/fonts/Yekand41d.eot?#iefix) format("embedded-opentype"), url(/admin/fonts/Yekan.woff) format("woff"), url(/admin/fonts/Yekan.ttf) format("truetype"), url(/admin/fonts/Yekan.svg#BYekan) format("svg");
                            font-weight: normal;
                            font-style: normal
                        }
                        body {font-family:yekan;
                            font-size: 10pt;
                        }
                        div.blueTable {
                  border: 1px solid #1C6EA4;
                  background-color: #EEEEEE;
                  width: 100%;
                  text-align: right;
                  border-collapse: collapse;
                }
                .divTable.blueTable .divTableCell, .divTable.blueTable .divTableHead {
                  border: 1px solid #AAAAAA;
                  padding: 3px 2px;
                }
                .divTable.blueTable .divTableBody .divTableCell {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle {
                  font-size: 10px;
                }
                .blueTable .tableFootStyle .links {
                     text-align: right;
                }
                .blueTable .tableFootStyle .links a{
                  display: inline-block;
                  background: #1C6EA4;
                  color: #FFFFFF;
                  padding: 2px 8px;
                  border-radius: 5px;
                }
                .blueTable.outerTableFooter {
                  border-top: none;
                }
                .blueTable.outerTableFooter .tableFootStyle {
                  padding: 3px 5px; 
                }
                /* DivTable.com */
                .divTable{ display: table; }
                .divTableRow { display: table-row; }
                .divTableHeading { display: table-header-group;}
                .divTableCell, .divTableHead { display: table-cell;}
                .divTableHeading { display: table-header-group;}
                .divTableFoot { display: table-footer-group;}
                .divTableBody { display: table-row-group;}
                p {	margin: 0pt;
                    font-size: 13px; }
                        table.items {
                            border: 0.1mm solid #000000;
                        }
                        td { vertical-align: top; }
                        .items td {
                            border-left: 0.1mm solid #000000;
                            border-right: 0.1mm solid #000000;
                            border-top: 0.1mm solid #000000;
                        }
                        table thead td { background-color: #EEEEEE;
                            border: 0.1mm solid #000000;
                            font-variant: small-caps;
                        }
                        :root {
                            --bleeding: 0.2cm;
                            --margin: 0.5cm;
                          }
                          
                          @page {
                            size: A4;
                            margin: 0;
                          }
                          * {
                            box-sizing: border-box;
                          }
                          
                          body {
                            margin: 0 auto;
                            padding: 0;
                            background: rgb(204, 204, 204);
                            display: flex;
                            flex-direction: column;
                          }
                          
                          .page {
                            display: inline-block;
                            position: relative;
                            height: 297mm;
                            width: 210mm;
                            font-size: 10pt;
                            margin: 2em auto;
                            padding: calc(var(--bleeding) + var(--margin));
                            box-shadow: 0 0 0.0cm rgba(0, 0, 0, 0.5);
                            background: white;
                          }
                          
                          @media screen {
                            .page::after {
                              position: absolute;
                              content: "";
                              top: 0;
                              left: 0;
                              width: calc(100% - var(--bleeding) * 2);
                              height: calc(100% - var(--bleeding) * 2);
                              margin: var(--bleeding);
                              outline: thin dashed black;
                              pointer-events: none;
                              z-index: 9999;
                            }
                            div.footer {
                                display: none;
                            }
                          }
                          
                          @media print {
                            .page {
                              margin: 0;
                              overflow: hidden;
                            }
                            div.footer {
                                position: fixed;
                                bottom: 1cm;
                                width: 210mm;
                            }
                          }
                        </style>
                        </head>
                        <body dir="rtl">
                        <div class="page">
                        <htmlpageheader name="myheader">
                        <center><b style="font-size: 12pt;">تحلیل کارنامه ' . $KarnamehName . ' ماه</b> ( '.$user->f_name.' '.$user->l_name.' )</center><br>
                        </htmlpageheader>
                        <sethtmlpageheader name="myheader" value="on" show-this-page="1" /><br><br>';
                echo $render1;
                foreach ($mykarnamehs as $mykarnameh) {
                    if ($this->getclassdeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) == 0) {
                        $cloop = "تغییری نکرده";
                    } elseif ($this->getclassdeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) > 0) {
                        $cloop = $this->getclassdeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) . " پله رشد داشته";
                    } elseif ($this->getclassdeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) < 0) {
                        $cloop = abs($this->getclassdeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg)) . " پله افت داشته";
                    }

                    if ($this->getpayedeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) == 0) {
                        $ploop = "تغییری نکرده";
                    } elseif ($this->getpayedeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) > 0) {
                        $ploop = $this->getpayedeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) . " پله رشد داشته";
                    } elseif ($this->getpayedeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg) < 0) {
                        $ploop = abs($this->getpayedeveloop($idk, $mykarnameh->coddars, $id, $mykarnameh->avg)) . " پله افت داشته";
                    }
                    echo '<p style="text-align: justify;">رتبه شما در درس ' . \App\dars::where('id', $mykarnameh->coddars)->first()['name'] . ' نسبت به ' . $pKarnamehName . ' ماه در بین دانش آموزان کلاس ' . $class . '، ' . $cloop . ' و همچنین در بین دانش آموزان پایه ' . $user->paye . '، ' . $ploop . ' است.</p>';
                    $idn = $idn + 1;
                }
                $render3 = '
                        <div class="footer" style="border-top: 1px solid #000000; font-size: 9pt; text-align: center; padding-top: 3mm; ">
                        سامانه مدیریت آموزش مدارس (سَمام)
                        </div>
                        </div>
                        </body>
                        </html>';
                echo $render3;
            } else {
                if ($moadel > 3) {
                    $moadel = 'خیلی خوب';
                } elseif (($moadel < 3) && ($moadel >= 2)) {
                    $avg = 'خوب';
                } elseif (($moadel < 2) && ($moadel >= 1)) {
                    $avg = 'قابل قبول';
                } elseif ($moadel < 1) {
                    $avg = 'نیاز به تلاش مجدد';
                }
                return view('includ.karnamehrendersmonthtosify', compact('mykarnamehs', 'moadel', 'KarnamehName', 'studentnumbers', 'rankkol', 'month', 'idk', 'id', 'idc'));
            }
        }
    }

    function getmoadell_m($idk, $id)
    {
        $mykarnamehs = KarnamehAdmin::where('name', $name)->where('user_id', $user)->get();
        $marks = 0;
        $vaheds = 0;
        foreach ($mykarnamehs as $mykarnameh) {
            $vahed = \App\dars::where('id', $mykarnameh->dars_id)->first()['vahed'];
            $mark = ($mykarnameh->mark) * $vahed;
            $vaheds = $vaheds + $vahed;
            $marks = $marks + $mark;
        }
        if ($vaheds == 0) {
            $moadel = 0;
        } else
            $moadel = round($marks / $vaheds, 2);
        return $moadel;
    }

    function getclassrank($idk, $mykarnameh, $id, $mymark)
    {
        $class = \App\User::where('id', $id)->first()['class'];
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(mark_items.mark) AS avg
      FROM mark_items
      WHERE mark_items.codclass = $class
      AND MONTH(mark_items.created_at) = '$idk'
      AND mark_items.coddars = $mykarnameh
      GROUP BY mark_items.coddars,
               mark_items.user_id,
               mark_items.codclass
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh) {
            if ($mykarnameh->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        return $rotbeh;
    }

    function getclassdeveloop($idk, $mykarnameh, $id, $mymark)
    {
        $difrent = 0;
        $class = \App\User::where('id', $id)->first()['class'];
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(mark_items.mark) AS avg
      FROM mark_items
      WHERE mark_items.codclass = $class
      AND MONTH(mark_items.created_at) = '$idk'
      AND mark_items.coddars = $mykarnameh
      GROUP BY mark_items.coddars,
               mark_items.user_id,
               mark_items.codclass
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh1) {
            if ($mykarnameh1->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        $value = $rotbeh;
        if ($idk == 1) {
            $idp = 12;
        } else {
            $idp = $idk - 1;
        }
        if ($idp > 0) {
            $pmykarnamehs = DB::select(DB::raw("SELECT
            *,
            AVG(mark_items.mark) AS avg
          FROM mark_items
          WHERE mark_items.codclass = $class
          AND MONTH(mark_items.created_at) = '$idp'
          AND mark_items.coddars = $mykarnameh
          GROUP BY mark_items.coddars,
                   mark_items.user_id,
                   mark_items.codclass
          ORDER BY avg DESC"));
            $rotbehhp = 1;
            $rotbehp = 1;
            foreach ($pmykarnamehs as $pmykarnameh1) {
                if ($pmykarnameh1->user_id == $id) {
                    $rotbehp = $rotbehhp;
                } else {
                    $rotbehhp = $rotbehhp + 1;
                }
            }
            $pvalue = $rotbehp;
            $difrent = $pvalue - $value;
        }
        return $difrent;
    }

    function getpayerank($idk, $mykarnameh, $id, $mymark)
    {
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(mark_items.mark) AS avg
      FROM mark_items
      WHERE MONTH(mark_items.created_at) = '$idk'
      AND mark_items.coddars = $mykarnameh
      GROUP BY mark_items.coddars,
               mark_items.user_id,
               mark_items.codclass
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh) {
            if ($mykarnameh->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        return $rotbeh;
    }

    function getpayedeveloop($idk, $mykarnameh, $id, $mymark)
    {
        $difrent = 0;
        $mykarnamehs = DB::select(DB::raw("SELECT
        *,
        AVG(mark_items.mark) AS avg
      FROM mark_items
      WHERE MONTH(mark_items.created_at) = '$idk'
      AND mark_items.coddars = $mykarnameh
      GROUP BY mark_items.coddars,
               mark_items.user_id,
               mark_items.codclass
      ORDER BY avg DESC"));
        $rotbehh = 1;
        foreach ($mykarnamehs as $mykarnameh1) {
            if ($mykarnameh1->user_id == $id) {
                $rotbeh = $rotbehh;
            } else {
                $rotbehh = $rotbehh + 1;
            }
        }
        $value = $rotbeh;
        if ($idk == 1) {
            $idp = 12;
        } else {
            $idp = $idk - 1;
        }
        if ($idp > 0) {
            $pmykarnamehs = DB::select(DB::raw("SELECT
            *,
            AVG(mark_items.mark) AS avg
          FROM mark_items
          WHERE MONTH(mark_items.created_at) = '$idp'
          AND mark_items.coddars = $mykarnameh
          GROUP BY mark_items.coddars,
                   mark_items.user_id,
                   mark_items.codclass
          ORDER BY avg DESC"));
            $rotbehhp = 1;
            $rotbehp = 1;
            foreach ($pmykarnamehs as $pmykarnameh1) {
                if ($pmykarnameh1->user_id == $id) {
                    $rotbehp = $rotbehhp;
                } else {
                    $rotbehhp = $rotbehhp + 1;
                }
            }
            $pvalue = $rotbehp;
            $difrent = $pvalue - $value;
        }
        return $difrent;
    }

    function gettop($idk, $dars)
    {
        $marks = \Illuminate\Support\Facades\DB::table('mark_items')->whereRaw('MONTH(created_at) = ?', $idk)->where('coddars', $dars)
            ->select(\Illuminate\Support\Facades\DB::raw('avg(mark) as avg,  user_id'))
            ->groupBy('user_id')
            ->orderBy('avg', 'desc')
            ->get();
        //    dd($marks);
        $top = round($marks[0]->avg, 2);
        return $top;
    }

    function getavg($idk, $dars)
    {
        $marks = \Illuminate\Support\Facades\DB::table('mark_items')->whereRaw('MONTH(created_at) = ?', $idk)->where('coddars', $dars)
            ->select(\Illuminate\Support\Facades\DB::raw('avg(mark) as avg,  user_id'))
            ->groupBy('user_id')
            ->get();

        $avg = $marks->avg('avg');
        $avge = round($avg, 2);
        return $avge;
    }

    public function setting()
    {
        $setting = Setting::all()->first();

        $connect = Bigbluebutton::isConnect(); //default
        $connect2 = Bigbluebutton::server('server1')->isConnect(); //for specific server
        //        dd($connect, $connect2);
        $gatway = Gateway::where('id', 1)->pluck('config')->first();
        $gatway = substr($gatway, 13, -2);

        return view('Admin.setting', ['setting' => $setting, 'connect' => $connect, 'gatway' => $gatway, 'connect2' => $connect2]);
    }

    public function settingstore(Request $request)
    {
        $status = 0;
        if ($request->finance_status == 'on') {
            $status = 1;
        }
        $row = Setting::all()->first();
        $row->update([
            'name' => $request->name,
            'BBB_SECURITY_SALT' => $request->BBB_SECURITY_SALT,
            'BBB_SECURITY_SALT_2' => $request->BBB_SECURITY_SALT_2,
            'BBB_SERVER_BASE_URL' => $request->BBB_SERVER_BASE_URL,
            'BBB_SERVER_BASE_URL_2' => $request->BBB_SERVER_BASE_URL_2,
            'finance_status' => $status,
            'finance_deadline' => $request->finance_deadline,
            'sky' => $request->sky,
        ]);
        $gatway = Gateway::where('id', 1)->first();
        $config = '{"' . 'merchant' . '":"' . $request->config . '"}';
        $gatway->update([
            'config' => $config
        ]);

        // Artisan::call('cache:clear');
        // Artisan::call('config:cache');
        $cover = $request->file('logo');
        if (!empty($cover)) {
            //for resize
            $originalImage = $request->file('logo');
            $thumbnailImage = Image::make($originalImage);
            $thumbnailPath = public_path() . '/uploads/';
            // $thumbnailImage->resize(150, 150);
            $thumbnailImage->save($thumbnailPath . time() . $originalImage->getClientOriginalName());
            $row->update([
                'logo' => time() . $originalImage->getClientOriginalName(),
            ]);
            alert()->success('موفق', 'ویرایش شما با موفقیت ثبت گردید!');
            return back();
        }
        alert()->success('موفق', 'ویرایش شما با موفقیت ثبت گردید!');
        return back();
    }

    public function settingstorename(Request $request)
    {
        $this->validate(request(), [
            'name' => 'required',
            'student' => 'required',
            'students' => 'required',
            'teacher' => 'required',
            'teachers' => 'required',
            'parent' => 'required',
            'parents' => 'required',
            'school' => 'required',
            'admin' => 'required',
            'mark1' => 'required',
            'mark2' => 'required',
            'mark3' => 'required',
        ]);
        $row = Setting::all()->first();
        $row->update([
            'name' => $request->name,
            'student' => $request->student,
            'students' => $request->students,
            'teacher' => $request->teacher,
            'teachers' => $request->teachers,
            'parent' => $request->parent,
            'parents' => $request->parents,
            'paye' => $request->paye,
            'school' => $request->school,
            'admin' => $request->admin,
            'mark1' => $request->mark1,
            'mark2' => $request->mark2,
            'mark3' => $request->mark3,
            'type_mark' => $request->type_mark,
            'theme' => $request->theme,
        ]);
        // Artisan::call('cache:clear');
        // Artisan::call('config:cache');
        $cover = $request->file('logo');
        if (!empty($cover)) {
            //for resize
            $originalImage = $request->file('logo');
            $thumbnailImage = Image::make($originalImage);
            $thumbnailPath = public_path() . '/uploads/';
            // $thumbnailImage->resize(150, 150);
            $thumbnailImage->save($thumbnailPath . time() . $originalImage->getClientOriginalName());
            $row->update([
                'logo' => time() . $originalImage->getClientOriginalName(),
            ]);
            alert()->success('موفق', 'ویرایش شما با موفقیت ثبت گردید!');
            return back();
        }
        alert()->success('موفق', 'ویرایش شما با موفقیت ثبت گردید!');
        return back();
    }

    public function settingstoresms(Request $request)
    {
        $row = Setting::all()->first();
        $row->update([
            'sms_token' => $request->sms_api,
            'forgot_pattern' => $request->forgot_pattern,
        ]);
        // Artisan::call('cache:clear');
        // Artisan::call('config:cache');
        // Artisan::call('config:clear');
        alert()->success('موفق', 'ویرایش شما با موفقیت ثبت گردید!');
        return back();
    }
}
